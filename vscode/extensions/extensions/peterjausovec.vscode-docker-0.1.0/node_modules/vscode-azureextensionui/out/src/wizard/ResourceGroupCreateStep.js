"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const azure_arm_resource_1 = require("azure-arm-resource");
const localize_1 = require("../localize");
const AzureWizardExecuteStep_1 = require("./AzureWizardExecuteStep");
class ResourceGroupCreateStep extends AzureWizardExecuteStep_1.AzureWizardExecuteStep {
    execute(wizardContext, outputChannel) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!wizardContext.resourceGroup) {
                // tslint:disable-next-line:no-non-null-assertion
                const newName = wizardContext.newResourceGroupName;
                // tslint:disable-next-line:no-non-null-assertion
                const newLocation = wizardContext.location.name;
                outputChannel.appendLine(localize_1.localize('CreatingResourceGroup', 'Ensuring resource group "{0}" in location "{1} exists"...', newName, newLocation));
                const resourceClient = new azure_arm_resource_1.ResourceManagementClient(wizardContext.credentials, wizardContext.subscriptionId);
                wizardContext.resourceGroup = yield resourceClient.resourceGroups.createOrUpdate(newName, { location: newLocation });
                outputChannel.appendLine(localize_1.localize('CreatedResourceGroup', 'Successfully found resource group "{0}".', newName));
            }
            return wizardContext;
        });
    }
}
exports.ResourceGroupCreateStep = ResourceGroupCreateStep;
//# sourceMappingURL=ResourceGroupCreateStep.js.map