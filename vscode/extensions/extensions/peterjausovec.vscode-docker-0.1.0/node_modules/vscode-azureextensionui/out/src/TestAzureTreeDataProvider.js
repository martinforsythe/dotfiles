"use strict";
// CTI testing key: du44tQEltLOBZ91c5zAeL1isGNNRFfEX4mAJdh4ViVM=
// hCgJr2NdSCFiBYt+NytBnFn4rydn/xt9ZQtYgCJPufk=
// tenant id: 72f988bf-86f1-41af-91ab-2d7cd011db47
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const azure_arm_resource_1 = require("azure-arm-resource");
const ms_rest_azure_1 = require("ms-rest-azure");
const vscode_1 = require("vscode");
const callWithTelemetryAndErrorHandling_1 = require("./callWithTelemetryAndErrorHandling");
const errors_1 = require("./errors");
const localize_1 = require("./localize");
const parseError_1 = require("./parseError");
const AzureNode_1 = require("./treeDataProvider/AzureNode");
const AzureParentNode_1 = require("./treeDataProvider/AzureParentNode");
const LoadMoreTreeItem_1 = require("./treeDataProvider/LoadMoreTreeItem");
const RootNode_1 = require("./treeDataProvider/RootNode");
const SubscriptionNode_1 = require("./treeDataProvider/SubscriptionNode");
class TestAzureTreeDataProvider {
    constructor(resourceProvider, loadMoreCommandId, ui, telemetryReporter, rootTreeItems) {
        this._onDidChangeTreeDataEmitter = new vscode_1.EventEmitter();
        this._onNodeCreateEmitter = new vscode_1.EventEmitter();
        this._subscriptionNodes = [];
        this._disposables = [];
        this._resourceProvider = resourceProvider;
        this._loadMoreCommandId = loadMoreCommandId;
        this._ui = ui;
        this._telemetryReporter = telemetryReporter;
        this._customRootNodes = rootTreeItems ? rootTreeItems.map((treeItem) => new RootNode_1.RootNode(this, ui, treeItem, this._onNodeCreateEmitter)) : [];
    }
    dispose() {
        for (const disposable of this._disposables) {
            disposable.dispose();
        }
    }
    get onDidChangeTreeData() {
        return this._onDidChangeTreeDataEmitter.event;
    }
    get onNodeCreate() {
        return this._onNodeCreateEmitter.event;
    }
    getTreeItem(node) {
        return {
            label: node.label,
            id: node.id,
            collapsibleState: node instanceof AzureParentNode_1.AzureParentNode ? vscode_1.TreeItemCollapsibleState.Collapsed : undefined,
            contextValue: node.treeItem.contextValue,
            iconPath: node.iconPath,
            command: node.treeItem.commandId ? {
                command: node.treeItem.commandId,
                title: '',
                arguments: [node]
            } : undefined
        };
    }
    getChildren(node) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // tslint:disable:no-var-self
                const thisTree = this;
                return yield callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling('AzureTreeDataProvider.getChildren', this._telemetryReporter, undefined, function () {
                    return __awaiter(this, void 0, void 0, function* () {
                        const actionContext = this;
                        // tslint:enable:no-var-self
                        actionContext.suppressErrorDisplay = true;
                        actionContext.rethrowError = true;
                        let result;
                        if (node !== undefined) {
                            actionContext.properties.contextValue = node.treeItem.contextValue;
                            const cachedChildren = yield node.getCachedChildren();
                            const hasMoreChildren = node.treeItem.hasMoreChildren();
                            actionContext.properties.hasMoreChildren = String(hasMoreChildren);
                            result = node.creatingNodes.concat(cachedChildren);
                            if (hasMoreChildren) {
                                result = result.concat(new AzureNode_1.AzureNode(node, new LoadMoreTreeItem_1.LoadMoreTreeItem(thisTree._loadMoreCommandId)));
                            }
                        }
                        else { // Root of tree
                            result = yield thisTree.getRootNodes(actionContext);
                        }
                        this.measurements.childCount = result.length;
                        return result;
                    });
                });
            }
            catch (error) {
                return [new AzureNode_1.AzureNode(node, {
                        label: localize_1.localize('errorNode', 'Error: {0}', parseError_1.parseError(error).message),
                        contextValue: 'azureextensionui.error'
                    })];
            }
        });
    }
    refresh(node, clearCache = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (clearCache) {
                if (!node) {
                    this._subscriptionNodes = [];
                    this._customRootNodes.forEach((rootNode) => {
                        if (rootNode instanceof AzureParentNode_1.AzureParentNode) {
                            rootNode.clearCache();
                        }
                    });
                }
                else {
                    if (node.treeItem.refreshLabel) {
                        yield node.treeItem.refreshLabel(node);
                    }
                    if (node instanceof AzureParentNode_1.AzureParentNode) {
                        node.clearCache();
                    }
                }
            }
            this._onDidChangeTreeDataEmitter.fire(node);
        });
    }
    loadMore(node) {
        return __awaiter(this, void 0, void 0, function* () {
            if (node.parent instanceof AzureParentNode_1.AzureParentNode) {
                yield node.parent.loadMoreChildren();
                this._onDidChangeTreeDataEmitter.fire(node.parent);
            }
        });
    }
    showNodePicker(expectedContextValues, startingNode) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Array.isArray(expectedContextValues)) {
                expectedContextValues = [expectedContextValues];
            }
            // tslint:disable-next-line:strict-boolean-expressions
            let node = startingNode || this._subscriptionNodes[0]; // automatically just grab the first (test) subscription node
            while (!expectedContextValues.some((val) => node.treeItem.contextValue === val)) {
                if (node instanceof AzureParentNode_1.AzureParentNode) {
                    node = yield node.pickChildNode(expectedContextValues);
                }
                else {
                    throw new Error(localize_1.localize('noResourcesError', 'No matching resources found.'));
                }
            }
            return node;
        });
    }
    findNode(id) {
        return __awaiter(this, void 0, void 0, function* () {
            let nodes = yield this.getChildren();
            let foundAncestor;
            do {
                foundAncestor = false;
                for (const node of nodes) {
                    if (node.id === id) {
                        return node;
                    }
                    else if (id.startsWith(`${node.id}/`) && node instanceof AzureParentNode_1.AzureParentNode) {
                        // Append '/' to 'node.id' when checking 'startsWith' to ensure its actually an ancestor, rather than a node at the same level that _happens_ to start with the same id
                        // For example, two databases named 'test' and 'test1' as described in this issue: https://github.com/Microsoft/vscode-cosmosdb/issues/488
                        nodes = yield node.getCachedChildren();
                        foundAncestor = true;
                        break;
                    }
                }
            } while (foundAncestor);
            return undefined;
        });
    }
    getRootNodes(actionContext) {
        return __awaiter(this, void 0, void 0, function* () {
            actionContext.properties.isActivationEvent = 'true';
            actionContext.properties.contextValue = 'root';
            let nodes;
            this._subscriptionNodes = [];
            const clientId = process.env.SERVICE_PRINCIPAL_CLIENT_ID;
            const secret = process.env.SERVICE_PRINCIPAL_SECRET;
            const domain = process.env.SERVICE_PRINCIPAL_DOMAIN;
            if (!clientId || !secret || !domain) {
                throw new Error('Tests can only be run on Travis.');
            }
            const credentials = (yield ms_rest_azure_1.loginWithServicePrincipalSecret(clientId, secret, domain));
            const subscriptionClient = new azure_arm_resource_1.SubscriptionClient(credentials);
            const subscriptions = yield subscriptionClient.subscriptions.list();
            // returns an array withy subscriptionId, displayName
            const tenants = yield subscriptionClient.tenants.list();
            // contains tenantId (if I need that)
            let tenantId;
            if (tenants[0].id) {
                tenantId = tenants[0].id;
            }
            else {
                throw new errors_1.ArgumentError(tenants[0]);
            }
            const session = {
                environment: credentials.environment,
                userId: '',
                tenantId: tenantId,
                credentials: credentials
            };
            let id;
            let displayName;
            let subscriptionId;
            if (subscriptions[0].id && subscriptions[0].displayName && subscriptions[0].subscriptionId) {
                id = subscriptions[0].id;
                displayName = subscriptions[0].displayName;
                subscriptionId = subscriptions[0].subscriptionId;
            }
            else {
                throw new errors_1.ArgumentError(subscriptions[0]);
            }
            const testSubscriptionNode = new SubscriptionNode_1.SubscriptionNode(this, this._ui, this._resourceProvider, id, session, displayName, subscriptionId, this._onNodeCreateEmitter);
            this._subscriptionNodes = [testSubscriptionNode];
            nodes = [testSubscriptionNode];
            return nodes;
        });
    }
}
TestAzureTreeDataProvider.subscriptionContextValue = SubscriptionNode_1.SubscriptionNode.contextValue;
exports.TestAzureTreeDataProvider = TestAzureTreeDataProvider;
//# sourceMappingURL=TestAzureTreeDataProvider.js.map