"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_1 = require("vscode");
const callWithTelemetryAndErrorHandling_1 = require("./callWithTelemetryAndErrorHandling");
const AzureNode_1 = require("./treeDataProvider/AzureNode");
// tslint:disable:no-any no-unsafe-any
class AzureActionHandler {
    constructor(extensionContext, outputChannel, telemetryReporter) {
        this._extensionContext = extensionContext;
        this._outputChannel = outputChannel;
        this._telemetryReporter = telemetryReporter;
    }
    registerCommand(commandId, callback) {
        this._extensionContext.subscriptions.push(vscode_1.commands.registerCommand(commandId, (...args) => __awaiter(this, void 0, void 0, function* () {
            return yield callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling(commandId, this._telemetryReporter, this._outputChannel, function () {
                if (args.length > 0 && args[0] instanceof AzureNode_1.AzureNode) {
                    const node = args[0];
                    this.properties.contextValue = node.treeItem.contextValue;
                }
                return callback.call(this, ...args);
            }, this._extensionContext);
        })));
    }
    registerEvent(eventId, event, callback) {
        this._extensionContext.subscriptions.push(event((...args) => __awaiter(this, void 0, void 0, function* () {
            return yield callWithTelemetryAndErrorHandling_1.callWithTelemetryAndErrorHandling(eventId, this._telemetryReporter, this._outputChannel, function () {
                return callback.call(this, ...args);
            }, this._extensionContext);
        })));
    }
}
exports.AzureActionHandler = AzureActionHandler;
//# sourceMappingURL=AzureActionHandler.js.map