## PIPENV
# PIPENV_DEFAULT_PYTHON_VERSION=/usr/local/bin/python3
# eval "$(pipenv --completion)"
# alias pact="source $(pipenv --venv)/bin/activate"

## PYENV
export PYENV_ROOT="$HOME/.pyenv"
if [[ -d $PYENV_ROOT ]];
then
    PATH="$PYENV_ROOT/bin:$PATH"
    # initialize pyenv
    eval "$(pyenv init -)"
fi

## Compiler flags for pyenv to discover homebrew's zlib, openssl, sqlite and readline
#export PATH="/usr/local/opt/sqlite/bin:$PATH"
#export LDFLAGS="-L/usr/local/opt/readline/lib $LDFLAGS"
#export LDFLAGS="-L/usr/local/opt/zlib/lib $LDFLAGS"
#export LDFLAGS="-L/usr/local/opt/openssl@1.1/lib $LDFLAGS"
#export LDFLAGS="-L/usr/local/opt/sqlite/lib $LDFLAGS"
#export CFLAGS="-I/usr/local/opt/readline/include $CFLAGS"
#export CLFAGS="-I/usr/local/opt/zlib/include $CFLAGS"
#export CFLAGS="-I/usr/local/opt/openssl@1.1/include $CFLAGS"
#export CFLAGS="-I/usr/local/opt/sqlite/include $CFLAGS"
#export CPPFLAGS="-I/usr/local/opt/readline/include $CPPFLAGS"
#export CPPFLAGS="-I/usr/local/opt/zlib/include $CPPFLAGS"
#export CPPFLAGS="-I/usr/local/opt/openssl@1.1/include $CPPFLAGS"
#export CPPFLAGS="-I/usr/local/opt/sqlite/include $CPPFLAGS"
#export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:/usr/local/opt/zlib/lib/pkgconfig"

export MACOSX_DEPLOYMENT_TARGET=10.14

## only run pip if there is a virtualenv currently activated
export PIP_REQUIRE_VIRTUALENV=true
## enable global pip
gpip2() {
      PIP_REQUIRE_VIRTUALENV="" pip "$@"
}
gpip() {
    PIP_REQUIRE_VIRTUALENV="" pip3 "$@"
}

## FUNCTION FOR REMOVING PYTHON FILES
pyclean () {
      find . -type f -name "*.py[co]" -delete
      find . -type d -name "__pycache__" -exec rm -r {} +;
      find . -type d -name ".pytest_cache/" -exec rm -r {} +;
}

## FUNCTION FOR ACTIVATING VIRTUALENVS
workon () {
    if [ $# -eq 2 ]
    then
        # FIXME: should detect "workon conda envname"
        # workon conda envname
        $PYENV_ROOT/versions/miniconda3-latest/bin/conda activate $2
    else
        # workon envname
        source $HOME/.local/share/virtualenvs/$1/bin/activate
    fi
}

## FUNCTION FOR MAKING VIRTUALENVS
## example usage:
##     mkvenv .env 3.6.6
## FIXME: should modify to work with conda?
mkvenv () {
    if [ $# -ne 2 ]
    then
        echo "Expected arguments: venv_name python_version"
        echo "Available python versions:"
        pyenv versions
    else
        name=$1
        version=$2
        $PYENV_ROOT/versions/$version/bin/python -m venv $name
    fi
}

